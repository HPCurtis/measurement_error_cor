// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace measure_cor_error_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 43> locations_array__ =
  {" (found before start of program)",
  " (in 'measure_cor_error.stan', line 23, column 2 to column 15)",
  " (in 'measure_cor_error.stan', line 24, column 2 to column 29)",
  " (in 'measure_cor_error.stan', line 25, column 2 to column 23)",
  " (in 'measure_cor_error.stan', line 26, column 2 to column 30)",
  " (in 'measure_cor_error.stan', line 31, column 0 to column 23)",
  " (in 'measure_cor_error.stan', line 32, column 0 to column 47)",
  " (in 'measure_cor_error.stan', line 58, column 2 to column 36)",
  " (in 'measure_cor_error.stan', line 34, column 2 to column 27)",
  " (in 'measure_cor_error.stan', line 33, column 14 to line 35, column 5)",
  " (in 'measure_cor_error.stan', line 33, column 0 to line 35, column 5)",
  " (in 'measure_cor_error.stan', line 42, column 0 to column 31)",
  " (in 'measure_cor_error.stan', line 43, column 0 to column 37)",
  " (in 'measure_cor_error.stan', line 44, column 0 to column 33)",
  " (in 'measure_cor_error.stan', line 47, column 4 to column 25)",
  " (in 'measure_cor_error.stan', line 46, column 14 to line 48, column 1)",
  " (in 'measure_cor_error.stan', line 46, column 0 to line 48, column 1)",
  " (in 'measure_cor_error.stan', line 52, column 0 to column 38)",
  " (in 'measure_cor_error.stan', line 51, column 14 to line 53, column 1)",
  " (in 'measure_cor_error.stan', line 51, column 0 to line 53, column 1)",
  " (in 'measure_cor_error.stan', line 5, column 0 to column 17)",
  " (in 'measure_cor_error.stan', line 6, column 0 to column 17)",
  " (in 'measure_cor_error.stan', line 11, column 6 to column 7)",
  " (in 'measure_cor_error.stan', line 11, column 16 to column 17)",
  " (in 'measure_cor_error.stan', line 11, column 0 to column 21)",
  " (in 'measure_cor_error.stan', line 12, column 6 to column 7)",
  " (in 'measure_cor_error.stan', line 12, column 16 to column 17)",
  " (in 'measure_cor_error.stan', line 12, column 0 to column 27)",
  " (in 'measure_cor_error.stan', line 16, column 0 to column 19)",
  " (in 'measure_cor_error.stan', line 17, column 0 to column 18)",
  " (in 'measure_cor_error.stan', line 18, column 0 to column 22)",
  " (in 'measure_cor_error.stan', line 19, column 0 to column 21)",
  " (in 'measure_cor_error.stan', line 20, column 0 to column 12)",
  " (in 'measure_cor_error.stan', line 23, column 9 to column 10)",
  " (in 'measure_cor_error.stan', line 24, column 20 to column 21)",
  " (in 'measure_cor_error.stan', line 25, column 8 to column 9)",
  " (in 'measure_cor_error.stan', line 25, column 18 to column 19)",
  " (in 'measure_cor_error.stan', line 26, column 23 to column 24)",
  " (in 'measure_cor_error.stan', line 31, column 6 to column 7)",
  " (in 'measure_cor_error.stan', line 31, column 16 to column 17)",
  " (in 'measure_cor_error.stan', line 32, column 7 to column 8)",
  " (in 'measure_cor_error.stan', line 32, column 10 to column 11)",
  " (in 'measure_cor_error.stan', line 58, column 14 to column 15)"};
class measure_cor_error_model final : public model_base_crtp<measure_cor_error_model> {
 private:
  int n;
  int J;
  std::vector<Eigen::Matrix<double,-1,1>> y;
  std::vector<Eigen::Matrix<double,-1,1>> epsilon;
  int sigma_mu_theta;
  int sigma_mu_beta;
  int sigma_sigma_theta;
  int sigma_sigma_beta;
  int cor_val;
 public:
  ~measure_cor_error_model() {}
  measure_cor_error_model(stan::io::var_context& context__, unsigned int
                          random_seed__ = 0, std::ostream*
                          pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "measure_cor_error_model_namespace::measure_cor_error_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 20;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 20;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "n", n, 1);
      current_statement__ = 21;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 21;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("y", "n", n);
      current_statement__ = 23;
      stan::math::validate_non_negative_index("y", "J", J);
      current_statement__ = 24;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(J)});
      y = std::vector<Eigen::Matrix<double,-1,1>>(n,
            Eigen::Matrix<double,-1,1>::Constant(J,
              std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 24;
        y_flat__ = context__.vals_r("y");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 25;
      stan::math::validate_non_negative_index("epsilon", "n", n);
      current_statement__ = 26;
      stan::math::validate_non_negative_index("epsilon", "J", J);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "epsilon", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(J)});
      epsilon = std::vector<Eigen::Matrix<double,-1,1>>(n,
                  Eigen::Matrix<double,-1,1>::Constant(J,
                    std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> epsilon_flat__;
        current_statement__ = 27;
        epsilon_flat__ = context__.vals_r("epsilon");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(epsilon, epsilon_flat__[(pos__ - 1)],
              "assigning variable epsilon", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 28;
      context__.validate_dims("data initialization", "sigma_mu_theta", "int",
        std::vector<size_t>{});
      sigma_mu_theta = std::numeric_limits<int>::min();
      current_statement__ = 28;
      sigma_mu_theta = context__.vals_i("sigma_mu_theta")[(1 - 1)];
      current_statement__ = 29;
      context__.validate_dims("data initialization", "sigma_mu_beta", "int",
        std::vector<size_t>{});
      sigma_mu_beta = std::numeric_limits<int>::min();
      current_statement__ = 29;
      sigma_mu_beta = context__.vals_i("sigma_mu_beta")[(1 - 1)];
      current_statement__ = 30;
      context__.validate_dims("data initialization", "sigma_sigma_theta",
        "int", std::vector<size_t>{});
      sigma_sigma_theta = std::numeric_limits<int>::min();
      current_statement__ = 30;
      sigma_sigma_theta = context__.vals_i("sigma_sigma_theta")[(1 - 1)];
      current_statement__ = 31;
      context__.validate_dims("data initialization", "sigma_sigma_beta",
        "int", std::vector<size_t>{});
      sigma_sigma_beta = std::numeric_limits<int>::min();
      current_statement__ = 31;
      sigma_sigma_beta = context__.vals_i("sigma_sigma_beta")[(1 - 1)];
      current_statement__ = 32;
      context__.validate_dims("data initialization", "cor_val", "int",
        std::vector<size_t>{});
      cor_val = std::numeric_limits<int>::min();
      current_statement__ = 32;
      cor_val = context__.vals_i("cor_val")[(1 - 1)];
      current_statement__ = 33;
      stan::math::validate_non_negative_index("mu", "J", J);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("sigma", "J", J);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("z", "n", n);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("z", "J", J);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("rho", "J", J);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("rho", "J", J);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("eta", "n", n);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("eta", "J", J);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("L", "J", J);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("L", "J", J);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("rho_u", "J", J);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("rho_u", "J", J);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = J + J + (n * J) + ((J * (J - 1)) / 2);
  }
  inline std::string model_name() const final {
    return "measure_cor_error_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = --filename-in-msg=measure_cor_error.stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "measure_cor_error_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 1;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, J);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__));
      current_statement__ = 3;
      z = in__.template read<
            std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(n, J);
      Eigen::Matrix<local_scalar_t__,-1,-1> rho =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, J, DUMMY_VAR__);
      current_statement__ = 4;
      rho = in__.template read_constrain_cholesky_factor_corr<
              Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, J);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> eta =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,-1> L =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, J, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(L, stan::math::diag_pre_multiply(sigma, rho),
        "assigning variable L");
      current_statement__ = 10;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 8;
        stan::model::assign(eta,
          stan::math::add(mu,
            stan::math::multiply(L,
              stan::model::rvalue(z, "z", stan::model::index_uni(i),
                stan::model::index_omni()))), "assigning variable eta",
          stan::model::index_uni(i), stan::model::index_omni());
      }
      {
        current_statement__ = 11;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0,
                         sigma_mu_theta));
        current_statement__ = 12;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma, 0,
                         sigma_sigma_theta));
        current_statement__ = 13;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(rho,
                         cor_val));
        current_statement__ = 16;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 14;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(z, "z",
                             stan::model::index_uni(i),
                             stan::model::index_omni())));
        }
        current_statement__ = 19;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 17;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_uni(i),
                             stan::model::index_omni()),
                           stan::model::rvalue(eta, "eta",
                             stan::model::index_uni(i),
                             stan::model::index_omni()),
                           stan::model::rvalue(epsilon, "epsilon",
                             stan::model::index_uni(i),
                             stan::model::index_omni())));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "measure_cor_error_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 1;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, J);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__));
      current_statement__ = 3;
      z = in__.template read<
            std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(n, J);
      Eigen::Matrix<local_scalar_t__,-1,-1> rho =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, J, DUMMY_VAR__);
      current_statement__ = 4;
      rho = in__.template read_constrain_cholesky_factor_corr<
              Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, J);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> eta =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,-1> L =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, J, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(L, stan::math::diag_pre_multiply(sigma, rho),
        "assigning variable L");
      current_statement__ = 10;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 8;
        stan::model::assign(eta,
          stan::math::add(mu,
            stan::math::multiply(L,
              stan::model::rvalue(z, "z", stan::model::index_uni(i),
                stan::model::index_omni()))), "assigning variable eta",
          stan::model::index_uni(i), stan::model::index_omni());
      }
      {
        current_statement__ = 11;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0,
                         sigma_mu_theta));
        current_statement__ = 12;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma, 0,
                         sigma_sigma_theta));
        current_statement__ = 13;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(rho,
                         cor_val));
        current_statement__ = 16;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 14;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(z, "z",
                             stan::model::index_uni(i),
                             stan::model::index_omni())));
        }
        current_statement__ = 19;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 17;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_uni(i),
                             stan::model::index_omni()),
                           stan::model::rvalue(eta, "eta",
                             stan::model::index_uni(i),
                             stan::model::index_omni()),
                           stan::model::rvalue(epsilon, "epsilon",
                             stan::model::index_uni(i),
                             stan::model::index_omni())));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "measure_cor_error_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<double,-1,1> sigma =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, J);
      std::vector<Eigen::Matrix<double,-1,1>> z =
        std::vector<Eigen::Matrix<double,-1,1>>(n,
          Eigen::Matrix<double,-1,1>::Constant(J,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 3;
      z = in__.template read<
            std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(n, J);
      Eigen::Matrix<double,-1,-1> rho =
        Eigen::Matrix<double,-1,-1>::Constant(J, J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      rho = in__.template read_constrain_cholesky_factor_corr<
              Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, J);
      std::vector<Eigen::Matrix<double,-1,1>> eta =
        std::vector<Eigen::Matrix<double,-1,1>>(n,
          Eigen::Matrix<double,-1,1>::Constant(J,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,-1> L =
        Eigen::Matrix<double,-1,-1>::Constant(J, J,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(mu);
      out__.write(sigma);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          out__.write(z[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(rho);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 6;
      stan::model::assign(L, stan::math::diag_pre_multiply(sigma, rho),
        "assigning variable L");
      current_statement__ = 10;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 8;
        stan::model::assign(eta,
          stan::math::add(mu,
            stan::math::multiply(L,
              stan::model::rvalue(z, "z", stan::model::index_uni(i),
                stan::model::index_omni()))), "assigning variable eta",
          stan::model::index_uni(i), stan::model::index_omni());
      }
      if (emit_transformed_parameters__) {
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            out__.write(eta[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(L);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,-1> rho_u =
        Eigen::Matrix<double,-1,-1>::Constant(J, J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      stan::model::assign(rho_u,
        stan::math::multiply(rho, stan::math::transpose(rho)),
        "assigning variable rho_u");
      current_statement__ = 7;
      stan::math::check_corr_matrix(function__, "rho_u", rho_u);
      out__.write(rho_u);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable mu");
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(sigma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable sigma");
      out__.write_free_lb(0, sigma);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__));
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          current_statement__ = 3;
          stan::model::assign(z, in__.read<local_scalar_t__>(),
            "assigning variable z", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(z);
      Eigen::Matrix<local_scalar_t__,-1,-1> rho =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, J, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(rho,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(J, J),
        "assigning variable rho");
      out__.write_free_cholesky_factor_corr(rho);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "z", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(J)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "rho", "double",
        std::vector<size_t>{static_cast<size_t>(J), static_cast<size_t>(J)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 1;
        mu_flat__ = context__.vals_r("mu");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          stan::model::assign(mu, mu_flat__[(pos__ - 1)],
            "assigning variable mu", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 2;
        sigma_flat__ = context__.vals_r("sigma");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          stan::model::assign(sigma, sigma_flat__[(pos__ - 1)],
            "assigning variable sigma", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 3;
        z_flat__ = context__.vals_r("z");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(z, z_flat__[(pos__ - 1)],
              "assigning variable z", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(z);
      Eigen::Matrix<local_scalar_t__,-1,-1> rho =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> rho_flat__;
        current_statement__ = 4;
        rho_flat__ = context__.vals_r("rho");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            stan::model::assign(rho, rho_flat__[(pos__ - 1)],
              "assigning variable rho", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_cholesky_factor_corr(rho);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu", "sigma", "z", "rho"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"eta", "L"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"rho_u"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(n),
                  static_cast<size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(J),
                  static_cast<size_t>(J)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n),
               static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(J),
               static_cast<size_t>(J)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(J),
               static_cast<size_t>(J)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
        param_names__.emplace_back(std::string() + "z" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
        param_names__.emplace_back(std::string() + "rho" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "eta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          param_names__.emplace_back(std::string() + "L" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          param_names__.emplace_back(std::string() + "rho_u" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
        param_names__.emplace_back(std::string() + "z" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ((J * (J - 1)) / 2); ++sym1__) {
      param_names__.emplace_back(std::string() + "rho" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "eta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          param_names__.emplace_back(std::string() + "L" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= ((J * (J - 1)) / 2); ++sym1__) {
        param_names__.emplace_back(std::string() + "rho_u" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "}},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rho_u\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "}},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((J * (J - 1)) /2)) + "},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rho_u\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((J * (J - 1)) /2)) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((J + J) + (n * J)) + (J * J));
    const size_t num_transformed = emit_transformed_parameters * (((n * J) +
      (J * J)));
    const size_t num_gen_quantities = emit_generated_quantities * ((J * J));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((J + J) + (n * J)) + (J * J));
    const size_t num_transformed = emit_transformed_parameters * (((n * J) +
      (J * J)));
    const size_t num_gen_quantities = emit_generated_quantities * ((J * J));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = measure_cor_error_model_namespace::measure_cor_error_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return measure_cor_error_model_namespace::profiles__;
}
#endif